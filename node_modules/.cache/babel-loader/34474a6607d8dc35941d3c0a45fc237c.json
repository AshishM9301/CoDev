{"ast":null,"code":"import { REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, SIGN_OUT, REGISTERSUCCESS, USER_LOADING, USER_LOADED, AUTH_ERROR, GOOGLE_SIGN_IN, GOOGLE_SIGN_OUT, VERIFICATION_SUCCESS, VERIFICATION_FAIL, SEND_OTP_SUCCESS, SEND_OTP_FAIL, DETAIL_UPDATING_SUCCESS, DETAIL_UPDATING_FAIL, USERS_LOADING_SUCCESS, USERS_LOADING_FAIL, USER_ACTIVATE_FAIL, USER_ACTIVATE_SUCCESS, ATTENDANCE_UPDATE_SUCCESS, ATTENDANCE_UPDATE_FAIL } from './types';\nimport { returnError } from './errorAction';\nimport Axios from 'axios';\nimport { getMessage } from './msgAction';\nimport { clickedPaymentButton } from './dashboardAction';\nexport const loadUser = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const myHeaders = new Headers();\n  myHeaders.append('end_auth', `${getState().auth.token}`);\n  await fetch('/api/users/auth', {\n    method: 'GET',\n    headers: myHeaders\n  }).then(res => res.json()).then(data => {\n    if (data.isAuth) {\n      dispatch({\n        type: USER_LOADED,\n        payload: data\n      });\n    } else {\n      console.log(data);\n      dispatch(returnError(data.errorMessage, 'AUTH_ERROR'));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }).catch(err => {});\n};\nexport const signIn = userId => {\n  return {\n    type: GOOGLE_SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: GOOGLE_SIGN_OUT\n  };\n};\nexport const login = formValues => {\n  return dispatch => {\n    const response = fetch('/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formValues)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(getMessage(data.message, 'LOGIN_SUCCESS'));\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      } else {\n        console.log(data);\n        dispatch(returnError(data.errorMessage, 'LOGIN_FAIL'));\n        dispatch({\n          type: LOGIN_FAIL\n        });\n      }\n    }).catch(error => {});\n  };\n};\nexport const register = formValues => {\n  return dispatch => {\n    if (formValues.password !== formValues.repassword) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      const response = fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formValues)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          dispatch(getMessage(data.message, 'REGISTERSUCCESS'));\n          dispatch({\n            type: REGISTERSUCCESS,\n            payload: data\n          });\n        } else {\n          dispatch(returnError(data.errorMessage, 'REGISTER_FAIL'));\n          dispatch({\n            type: REGISTER_FAIL\n          });\n        }\n      }).catch(err => {});\n    }\n  };\n};\nexport const logout = () => {\n  const respose = fetch('/api/users/logout').then(res => res.data);\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const configToken = getState => {\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; //If Token, add to headers\n\n  if (token) {\n    config.headers['end_auth'] = token;\n  }\n\n  return config;\n};\nexport const verify = formValues => {\n  return async dispatch => {\n    await fetch('/api/users/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formValues)\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        dispatch(getMessage(data.message, 'VERIFICATION_SUCCESS'));\n        dispatch({\n          type: VERIFICATION_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch(returnError(data.errorMessage, 'VERIFICATION_FAIL'));\n        dispatch({\n          type: VERIFICATION_FAIL\n        });\n      }\n    }).catch(err => {});\n  };\n};\nexport const otpSend = () => {\n  return dispatch => {\n    fetch('/api/users/emailverify').then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(getMessage(data.message, 'SEND_OTP_SUCCESS'));\n        dispatch({\n          type: SEND_OTP_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch(returnError(data.errorMessage, 'SEND_OTP_FAIL'));\n        dispatch({\n          type: SEND_OTP_FAIL\n        });\n      }\n    }).catch(err => {});\n  };\n};\nexport const detailUpdater = formValues => {\n  return dispatch => {\n    if (formValues.password !== formValues.password2) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      fetch('/api/users/detials', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formValues)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          dispatch(clickedPaymentButton('GET_PAYMENT'));\n          dispatch(getMessage(data.message, 'DETAIL_UPDATING_SUCCESS'));\n          dispatch({\n            type: DETAIL_UPDATING_SUCCESS,\n            payload: data\n          });\n        } else {\n          dispatch(returnError(data.errorMessage, 'DETAIL_UPDATING_FAIL'));\n          dispatch({\n            type: DETAIL_UPDATING_FAIL\n          });\n        }\n      }).catch(err => {});\n    }\n  };\n};\nexport const displayUser = () => {\n  return async dispatch => {\n    await fetch('/api/users').then(res => res.json()).then(data => {\n      if (data.success) {\n        dispatch(getMessage(data.message, 'USERS_LOADING_SUCCESS'));\n        dispatch({\n          type: USERS_LOADING_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch(returnError(data.errorMessage, 'USERS_LOADING_FAIL'));\n        dispatch({\n          type: USERS_LOADING_FAIL\n        });\n      }\n    }).catch(err => {});\n  };\n};\nexport const activateUser = formValues => {\n  return dispatch => {\n    if (formValues.role !== 2) {\n      dispatch(returnError(`${formValues.firstName} is not updated his Detail `, 'USER_ACTIVATE_FAIL'));\n      dispatch({\n        type: USER_ACTIVATE_FAIL\n      });\n    } else {\n      fetch('/api/users/activate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formValues)\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          dispatch(getMessage(data.message, 'USER_ACTIVATE_SUCCESS'));\n          dispatch({\n            type: USER_ACTIVATE_SUCCESS,\n            payload: data\n          });\n        } else {\n          dispatch(returnError(data.errorMessage, 'USER_ACTIVATE_FAIL'));\n          dispatch({\n            type: USER_ACTIVATE_FAIL\n          });\n        }\n      }).catch(err => {});\n    }\n  };\n};\nexport const makeAttendance = () => {\n  return async dispatch => {\n    await fetch('/api/users/auth').then(res => res.json()).then(data => {\n      if (data.success) {\n        dispatch(getMessage(data.message, 'ATTENDANCE_UPDATE_SUCCESS'));\n        dispatch({\n          type: ATTENDANCE_UPDATE_SUCCESS,\n          payload: data\n        });\n      } else {\n        console.log(data);\n        dispatch(returnError(data.errorMessage, 'ATTENDANCE_UPDATE_FAIL'));\n        dispatch({\n          type: ATTENDANCE_UPDATE_FAIL\n        });\n      }\n    }).catch(err => {});\n  };\n};","map":{"version":3,"sources":["D:/Projects/OPEN/DevLearn/client/src/actions/index.js"],"names":["REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","SIGN_OUT","REGISTERSUCCESS","USER_LOADING","USER_LOADED","AUTH_ERROR","GOOGLE_SIGN_IN","GOOGLE_SIGN_OUT","VERIFICATION_SUCCESS","VERIFICATION_FAIL","SEND_OTP_SUCCESS","SEND_OTP_FAIL","DETAIL_UPDATING_SUCCESS","DETAIL_UPDATING_FAIL","USERS_LOADING_SUCCESS","USERS_LOADING_FAIL","USER_ACTIVATE_FAIL","USER_ACTIVATE_SUCCESS","ATTENDANCE_UPDATE_SUCCESS","ATTENDANCE_UPDATE_FAIL","returnError","Axios","getMessage","clickedPaymentButton","loadUser","dispatch","getState","type","myHeaders","Headers","append","auth","token","fetch","method","headers","then","res","json","data","isAuth","payload","console","log","errorMessage","catch","err","signIn","userId","signOut","login","formValues","response","body","JSON","stringify","success","message","error","register","password","repassword","logout","respose","configToken","config","verify","otpSend","detailUpdater","password2","displayUser","activateUser","role","firstName","makeAttendance"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEC,eALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,UARF,EASEC,cATF,EAUEC,eAVF,EAWEC,oBAXF,EAYEC,iBAZF,EAaEC,gBAbF,EAcEC,aAdF,EAeEC,uBAfF,EAgBEC,oBAhBF,EAiBEC,qBAjBF,EAkBEC,kBAlBF,EAmBEC,kBAnBF,EAoBEC,qBApBF,EAqBEC,yBArBF,EAsBEC,sBAtBF,QAuBO,SAvBP;AAyBA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,oBAAT,QAAqC,mBAArC;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC1DD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAExB;AAAR,GAAD,CAAR;AACA,QAAMyB,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,UAAjB,EAA8B,GAAEJ,QAAQ,GAAGK,IAAX,CAAgBC,KAAM,EAAtD;AACA,QAAMC,KAAK,CAAC,iBAAD,EAAoB;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,OAAO,EAAEP;AAA1B,GAApB,CAAL,CACHQ,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACd,QAAIA,IAAI,CAACC,MAAT,EAAiB;AACff,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEvB,WADC;AAEPqC,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KALD,MAKO;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAd,MAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,YAApB,CAAZ,CAAR;AACAnB,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEtB;AAAR,OAAD,CAAR;AACD;AACF,GAbG,EAcHwC,KAdG,CAcIC,GAAD,IAAS,CAAE,CAdd,CAAN;AAeD,CAnBM;AAqBP,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLrB,IAAAA,IAAI,EAAErB,cADD;AAELmC,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLtB,IAAAA,IAAI,EAAEpB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAM2C,KAAK,GAAIC,UAAD,IAAgB;AACnC,SAAQ1B,QAAD,IAAc;AACnB,UAAM2B,QAAQ,GAAGnB,KAAK,CAAC,kBAAD,EAAqB;AACzCC,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgC;AAKzCkB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf;AALmC,KAArB,CAAL,CAOdf,IAPc,CAORC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPA,EAQdF,IARc,CAQRG,IAAD,IAAU;AACdG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,UAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,QAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,eAAf,CAAX,CAAR;AACAhC,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAE3B,aAAR;AAAuByC,UAAAA,OAAO,EAAEF;AAAhC,SAAD,CAAR;AACD,OAHD,MAGO;AACLG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAd,QAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,YAApB,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAE5B;AADC,SAAD,CAAR;AAGD;AACF,KApBc,EAqBd8C,KArBc,CAqBPa,KAAD,IAAW,CAAE,CArBL,CAAjB;AAsBD,GAvBD;AAwBD,CAzBM;AA2BP,OAAO,MAAMC,QAAQ,GAAIR,UAAD,IAAgB;AACtC,SAAQ1B,QAAD,IAAc;AACnB,QAAI0B,UAAU,CAACS,QAAX,KAAwBT,UAAU,CAACU,UAAvC,EAAmD;AACjDpC,MAAAA,QAAQ,CAACL,WAAW,CAAC,wBAAD,EAA2B,eAA3B,CAAZ,CAAR;AACAK,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE7B;AADC,OAAD,CAAR;AAGD,KALD,MAKO;AACL,YAAMsD,QAAQ,GAAGnB,KAAK,CAAC,qBAAD,EAAwB;AAC5CC,QAAAA,MAAM,EAAE,MADoC;AAE5CC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFmC;AAK5CkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf;AALsC,OAAxB,CAAL,CAOdf,IAPc,CAORC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPA,EAQdF,IARc,CAQRG,IAAD,IAAU;AACd,YAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,UAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,iBAAf,CAAX,CAAR;AACAhC,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAEzB,eADC;AAEPuC,YAAAA,OAAO,EAAEF;AAFF,WAAD,CAAR;AAID,SAND,MAMO;AACLd,UAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,eAApB,CAAZ,CAAR;AACAnB,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAE7B;AADC,WAAD,CAAR;AAGD;AACF,OArBc,EAsBd+C,KAtBc,CAsBPC,GAAD,IAAS,CAAE,CAtBH,CAAjB;AAuBD;AACF,GA/BD;AAgCD,CAjCM;AAmCP,OAAO,MAAMgB,MAAM,GAAG,MAAM;AAC1B,QAAMC,OAAO,GAAG9B,KAAK,CAAC,mBAAD,CAAL,CAA2BG,IAA3B,CAAiCC,GAAD,IAASA,GAAG,CAACE,IAA7C,CAAhB;AAEA,SAAO;AACLZ,IAAAA,IAAI,EAAE1B;AADD,GAAP;AAGD,CANM;AAQP,OAAO,MAAM+D,WAAW,GAAItC,QAAD,IAAc;AACvC,QAAMM,KAAK,GAAGN,QAAQ,GAAGK,IAAX,CAAgBC,KAA9B,CADuC,CAGvC;;AACA,QAAMiC,MAAM,GAAG;AACb9B,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAJuC,CAUvC;;AACA,MAAIH,KAAJ,EAAW;AACTiC,IAAAA,MAAM,CAAC9B,OAAP,CAAe,UAAf,IAA6BH,KAA7B;AACD;;AAED,SAAOiC,MAAP;AACD,CAhBM;AAkBP,OAAO,MAAMC,MAAM,GAAIf,UAAD,IAAgB;AACpC,SAAO,MAAO1B,QAAP,IAAoB;AACzB,UAAMQ,KAAK,CAAC,mBAAD,EAAsB;AAC/BC,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFsB;AAK/BkB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf;AALyB,KAAtB,CAAL,CAOHf,IAPG,CAOGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPX,EAQHF,IARG,CAQGG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,QAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,sBAAf,CAAX,CAAR;AACAhC,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEnB,oBADC;AAEPiC,UAAAA,OAAO,EAAEF;AAFF,SAAD,CAAR;AAID,OAND,MAMO;AACLd,QAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,mBAApB,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAElB;AADC,SAAD,CAAR;AAGD;AACF,KArBG,EAsBHoC,KAtBG,CAsBIC,GAAD,IAAS,CAAE,CAtBd,CAAN;AAuBD,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAMqB,OAAO,GAAG,MAAM;AAC3B,SAAQ1C,QAAD,IAAc;AACnBQ,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,UAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,QAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,kBAAf,CAAX,CAAR;AACAhC,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEjB,gBADC;AAEP+B,UAAAA,OAAO,EAAEF;AAFF,SAAD,CAAR;AAID,OAND,MAMO;AACLd,QAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,eAApB,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEhB;AADC,SAAD,CAAR;AAGD;AACF,KAhBH,EAiBGkC,KAjBH,CAiBUC,GAAD,IAAS,CAAE,CAjBpB;AAkBD,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMsB,aAAa,GAAIjB,UAAD,IAAgB;AAC3C,SAAQ1B,QAAD,IAAc;AACnB,QAAI0B,UAAU,CAACS,QAAX,KAAwBT,UAAU,CAACkB,SAAvC,EAAkD;AAChD5C,MAAAA,QAAQ,CAACL,WAAW,CAAC,wBAAD,EAA2B,eAA3B,CAAZ,CAAR;AACAK,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE7B;AADC,OAAD,CAAR;AAGD,KALD,MAKO;AACLmC,MAAAA,KAAK,CAAC,oBAAD,EAAuB;AAC1BC,QAAAA,MAAM,EAAE,MADkB;AAE1BC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFiB;AAK1BkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf;AALoB,OAAvB,CAAL,CAOGf,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQGF,IARH,CAQSG,IAAD,IAAU;AACd,YAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,UAAAA,QAAQ,CAACF,oBAAoB,CAAC,aAAD,CAArB,CAAR;AACAE,UAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,yBAAf,CAAX,CAAR;AACAhC,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAEf,uBADC;AAEP6B,YAAAA,OAAO,EAAEF;AAFF,WAAD,CAAR;AAID,SAPD,MAOO;AACLd,UAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,sBAApB,CAAZ,CAAR;AAEAnB,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAEd;AADC,WAAD,CAAR;AAGD;AACF,OAvBH,EAwBGgC,KAxBH,CAwBUC,GAAD,IAAS,CAAE,CAxBpB;AAyBD;AACF,GAjCD;AAkCD,CAnCM;AAqCP,OAAO,MAAMwB,WAAW,GAAG,MAAM;AAC/B,SAAO,MAAO7C,QAAP,IAAoB;AACzB,UAAMQ,KAAK,CAAC,YAAD,CAAL,CACHG,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,QAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,uBAAf,CAAX,CAAR;AACAhC,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEb,qBADC;AAEP2B,UAAAA,OAAO,EAAEF;AAFF,SAAD,CAAR;AAID,OAND,MAMO;AACLd,QAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,oBAApB,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEZ;AADC,SAAD,CAAR;AAGD;AACF,KAfG,EAgBH8B,KAhBG,CAgBIC,GAAD,IAAS,CAAE,CAhBd,CAAN;AAiBD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMyB,YAAY,GAAIpB,UAAD,IAAgB;AAC1C,SAAQ1B,QAAD,IAAc;AACnB,QAAI0B,UAAU,CAACqB,IAAX,KAAoB,CAAxB,EAA2B;AACzB/C,MAAAA,QAAQ,CACNL,WAAW,CACR,GAAE+B,UAAU,CAACsB,SAAU,6BADf,EAET,oBAFS,CADL,CAAR;AAMAhD,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX;AADC,OAAD,CAAR;AAGD,KAVD,MAUO;AACLiB,MAAAA,KAAK,CAAC,qBAAD,EAAwB;AAC3BC,QAAAA,MAAM,EAAE,MADmB;AAE3BC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFkB;AAK3BkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf;AALqB,OAAxB,CAAL,CAOGf,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQGF,IARH,CAQSG,IAAD,IAAU;AACd,YAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,UAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,uBAAf,CAAX,CAAR;AACAhC,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAEV,qBADC;AAEPwB,YAAAA,OAAO,EAAEF;AAFF,WAAD,CAAR;AAID,SAND,MAMO;AACLd,UAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,oBAApB,CAAZ,CAAR;AAEAnB,UAAAA,QAAQ,CAAC;AACPE,YAAAA,IAAI,EAAEX;AADC,WAAD,CAAR;AAGD;AACF,OAtBH,EAuBG6B,KAvBH,CAuBUC,GAAD,IAAS,CAAE,CAvBpB;AAwBD;AACF,GArCD;AAsCD,CAvCM;AAyCP,OAAO,MAAM4B,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOjD,QAAP,IAAoB;AACzB,UAAMQ,KAAK,CAAC,iBAAD,CAAL,CACHG,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB/B,QAAAA,QAAQ,CAACH,UAAU,CAACiB,IAAI,CAACkB,OAAN,EAAe,2BAAf,CAAX,CAAR;AACAhC,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAET,yBADC;AAEPuB,UAAAA,OAAO,EAAEF;AAFF,SAAD,CAAR;AAID,OAND,MAMO;AACLG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAd,QAAAA,QAAQ,CAACL,WAAW,CAACmB,IAAI,CAACK,YAAN,EAAoB,wBAApB,CAAZ,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAER;AAAR,SAAD,CAAR;AACD;AACF,KAdG,EAeH0B,KAfG,CAeIC,GAAD,IAAS,CAAE,CAfd,CAAN;AAgBD,GAjBD;AAkBD,CAnBM","sourcesContent":["import {\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  SIGN_OUT,\r\n  REGISTERSUCCESS,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  GOOGLE_SIGN_IN,\r\n  GOOGLE_SIGN_OUT,\r\n  VERIFICATION_SUCCESS,\r\n  VERIFICATION_FAIL,\r\n  SEND_OTP_SUCCESS,\r\n  SEND_OTP_FAIL,\r\n  DETAIL_UPDATING_SUCCESS,\r\n  DETAIL_UPDATING_FAIL,\r\n  USERS_LOADING_SUCCESS,\r\n  USERS_LOADING_FAIL,\r\n  USER_ACTIVATE_FAIL,\r\n  USER_ACTIVATE_SUCCESS,\r\n  ATTENDANCE_UPDATE_SUCCESS,\r\n  ATTENDANCE_UPDATE_FAIL,\r\n} from './types';\r\n\r\nimport { returnError } from './errorAction';\r\n\r\nimport Axios from 'axios';\r\nimport { getMessage } from './msgAction';\r\nimport { clickedPaymentButton } from './dashboardAction';\r\n\r\nexport const loadUser = () => async (dispatch, getState) => {\r\n  dispatch({ type: USER_LOADING });\r\n  const myHeaders = new Headers();\r\n  myHeaders.append('end_auth', `${getState().auth.token}`);\r\n  await fetch('/api/users/auth', { method: 'GET', headers: myHeaders })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (data.isAuth) {\r\n        dispatch({\r\n          type: USER_LOADED,\r\n          payload: data,\r\n        });\r\n      } else {\r\n        console.log(data);\r\n        dispatch(returnError(data.errorMessage, 'AUTH_ERROR'));\r\n        dispatch({ type: AUTH_ERROR });\r\n      }\r\n    })\r\n    .catch((err) => {});\r\n};\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: GOOGLE_SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: GOOGLE_SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const login = (formValues) => {\r\n  return (dispatch) => {\r\n    const response = fetch('/api/users/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formValues),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'LOGIN_SUCCESS'));\r\n          dispatch({ type: LOGIN_SUCCESS, payload: data });\r\n        } else {\r\n          console.log(data);\r\n          dispatch(returnError(data.errorMessage, 'LOGIN_FAIL'));\r\n          dispatch({\r\n            type: LOGIN_FAIL,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n};\r\n\r\nexport const register = (formValues) => {\r\n  return (dispatch) => {\r\n    if (formValues.password !== formValues.repassword) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      const response = fetch('/api/users/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formValues),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          if (data.success) {\r\n            dispatch(getMessage(data.message, 'REGISTERSUCCESS'));\r\n            dispatch({\r\n              type: REGISTERSUCCESS,\r\n              payload: data,\r\n            });\r\n          } else {\r\n            dispatch(returnError(data.errorMessage, 'REGISTER_FAIL'));\r\n            dispatch({\r\n              type: REGISTER_FAIL,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  const respose = fetch('/api/users/logout').then((res) => res.data);\r\n\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const configToken = (getState) => {\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  };\r\n\r\n  //If Token, add to headers\r\n  if (token) {\r\n    config.headers['end_auth'] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nexport const verify = (formValues) => {\r\n  return async (dispatch) => {\r\n    await fetch('/api/users/verify', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formValues),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'VERIFICATION_SUCCESS'));\r\n          dispatch({\r\n            type: VERIFICATION_SUCCESS,\r\n            payload: data,\r\n          });\r\n        } else {\r\n          dispatch(returnError(data.errorMessage, 'VERIFICATION_FAIL'));\r\n          dispatch({\r\n            type: VERIFICATION_FAIL,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n};\r\n\r\nexport const otpSend = () => {\r\n  return (dispatch) => {\r\n    fetch('/api/users/emailverify')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'SEND_OTP_SUCCESS'));\r\n          dispatch({\r\n            type: SEND_OTP_SUCCESS,\r\n            payload: data,\r\n          });\r\n        } else {\r\n          dispatch(returnError(data.errorMessage, 'SEND_OTP_FAIL'));\r\n          dispatch({\r\n            type: SEND_OTP_FAIL,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n};\r\n\r\nexport const detailUpdater = (formValues) => {\r\n  return (dispatch) => {\r\n    if (formValues.password !== formValues.password2) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      fetch('/api/users/detials', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formValues),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          if (data.success) {\r\n            dispatch(clickedPaymentButton('GET_PAYMENT'));\r\n            dispatch(getMessage(data.message, 'DETAIL_UPDATING_SUCCESS'));\r\n            dispatch({\r\n              type: DETAIL_UPDATING_SUCCESS,\r\n              payload: data,\r\n            });\r\n          } else {\r\n            dispatch(returnError(data.errorMessage, 'DETAIL_UPDATING_FAIL'));\r\n\r\n            dispatch({\r\n              type: DETAIL_UPDATING_FAIL,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n};\r\n\r\nexport const displayUser = () => {\r\n  return async (dispatch) => {\r\n    await fetch('/api/users')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'USERS_LOADING_SUCCESS'));\r\n          dispatch({\r\n            type: USERS_LOADING_SUCCESS,\r\n            payload: data,\r\n          });\r\n        } else {\r\n          dispatch(returnError(data.errorMessage, 'USERS_LOADING_FAIL'));\r\n          dispatch({\r\n            type: USERS_LOADING_FAIL,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n};\r\n\r\nexport const activateUser = (formValues) => {\r\n  return (dispatch) => {\r\n    if (formValues.role !== 2) {\r\n      dispatch(\r\n        returnError(\r\n          `${formValues.firstName} is not updated his Detail `,\r\n          'USER_ACTIVATE_FAIL'\r\n        )\r\n      );\r\n      dispatch({\r\n        type: USER_ACTIVATE_FAIL,\r\n      });\r\n    } else {\r\n      fetch('/api/users/activate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formValues),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          if (data.success) {\r\n            dispatch(getMessage(data.message, 'USER_ACTIVATE_SUCCESS'));\r\n            dispatch({\r\n              type: USER_ACTIVATE_SUCCESS,\r\n              payload: data,\r\n            });\r\n          } else {\r\n            dispatch(returnError(data.errorMessage, 'USER_ACTIVATE_FAIL'));\r\n\r\n            dispatch({\r\n              type: USER_ACTIVATE_FAIL,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n};\r\n\r\nexport const makeAttendance = () => {\r\n  return async (dispatch) => {\r\n    await fetch('/api/users/auth')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'ATTENDANCE_UPDATE_SUCCESS'));\r\n          dispatch({\r\n            type: ATTENDANCE_UPDATE_SUCCESS,\r\n            payload: data,\r\n          });\r\n        } else {\r\n          console.log(data);\r\n          dispatch(returnError(data.errorMessage, 'ATTENDANCE_UPDATE_FAIL'));\r\n          dispatch({ type: ATTENDANCE_UPDATE_FAIL });\r\n        }\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}