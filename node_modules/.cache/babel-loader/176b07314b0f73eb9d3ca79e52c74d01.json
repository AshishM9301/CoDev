{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Documents\\\\Projects\\\\OPEN\\\\DevLearn\\\\client\\\\src\\\\hoc\\\\auth.js\";\nimport React, { useEffect } from 'react';\nimport { loadUser } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nexport default function (SpecificComponent, option, adminRoute = null) {\n  function AuthenticationCheck(props) {\n    let user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    useEffect(() => {\n      //To know my current status, send Auth request\n      dispatch(loadUser()).then(response => {\n        //Not Loggined in Status\n        if (!response.payload.isAuth) {\n          if (option) {\n            props.history.push('/login');\n          } //Loggined in Status\n\n        } else {\n          //supposed to be Admin page, but not admin person wants to go inside\n          if (adminRoute && !response.payload.isAdmin) {\n            props.history.push('/');\n          } //Logged in Status, but Try to go into log in page\n          else {\n              if (option === false) {\n                props.history.push('/');\n              }\n            }\n        }\n      });\n    }, []);\n    return /*#__PURE__*/React.createElement(SpecificComponent, Object.assign({}, props, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  return AuthenticationCheck;\n}","map":{"version":3,"sources":["C:/Users/KIIT/Documents/Projects/OPEN/DevLearn/client/src/hoc/auth.js"],"names":["React","useEffect","loadUser","useSelector","useDispatch","SpecificComponent","option","adminRoute","AuthenticationCheck","props","user","state","dispatch","then","response","payload","isAuth","history","push","isAdmin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,eAAe,UAAUC,iBAAV,EAA6BC,MAA7B,EAAqCC,UAAU,GAAG,IAAlD,EAAwD;AACrE,WAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,QAAIC,IAAI,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAtB;AACA,UAAME,QAAQ,GAAGR,WAAW,EAA5B;AAEAH,IAAAA,SAAS,CAAC,MAAM;AACd;AACAW,MAAAA,QAAQ,CAACV,QAAQ,EAAT,CAAR,CAAqBW,IAArB,CAA2BC,QAAD,IAAc;AACtC;AACA,YAAI,CAACA,QAAQ,CAACC,OAAT,CAAiBC,MAAtB,EAA8B;AAC5B,cAAIV,MAAJ,EAAY;AACVG,YAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AACD,WAH2B,CAI5B;;AACD,SALD,MAKO;AACL;AACA,cAAIX,UAAU,IAAI,CAACO,QAAQ,CAACC,OAAT,CAAiBI,OAApC,EAA6C;AAC3CV,YAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,WAFD,CAGA;AAHA,eAIK;AACH,kBAAIZ,MAAM,KAAK,KAAf,EAAsB;AACpBG,gBAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD;AACF;AACF;AACF,OAnBD;AAoBD,KAtBQ,EAsBN,EAtBM,CAAT;AAwBA,wBAAO,oBAAC,iBAAD,oBAAuBT,KAAvB;AAA8B,MAAA,IAAI,EAAEC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AACD,SAAOF,mBAAP;AACD","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { loadUser } from '../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n  function AuthenticationCheck(props) {\r\n    let user = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n      //To know my current status, send Auth request\r\n      dispatch(loadUser()).then((response) => {\r\n        //Not Loggined in Status\r\n        if (!response.payload.isAuth) {\r\n          if (option) {\r\n            props.history.push('/login');\r\n          }\r\n          //Loggined in Status\r\n        } else {\r\n          //supposed to be Admin page, but not admin person wants to go inside\r\n          if (adminRoute && !response.payload.isAdmin) {\r\n            props.history.push('/');\r\n          }\r\n          //Logged in Status, but Try to go into log in page\r\n          else {\r\n            if (option === false) {\r\n              props.history.push('/');\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, []);\r\n\r\n    return <SpecificComponent {...props} user={user} />;\r\n  }\r\n  return AuthenticationCheck;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}