{"ast":null,"code":"import { REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, SIGN_OUT, REGISTERSUCCESS, USER_LOADING, USER_LOADED, AUTH_ERROR, GOOGLE_SIGN_IN, GOOGLE_SIGN_OUT, VERIFICATION_SUCCESS, VERIFICATION_FAIL } from './types';\nimport { returnError } from './errorAction';\nimport connect from '../routes/connect';\nimport Axios from 'axios';\nimport { getMessage } from './msgAction';\nimport { browserHistory } from '../components/Header/Header';\nexport const loadUser = () => dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  Axios.get('http://localhost:5000/api/users/auth').then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n    console.log(res.data);\n  }).catch(err => {\n    console.log(err);\n    dispatch(returnError(err.response.data, 'AUTH_ERROR'));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const signIn = userId => {\n  return {\n    type: GOOGLE_SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: GOOGLE_SIGN_OUT\n  };\n};\nexport const login = formValues => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n    await Axios.post('/api/users/login', body, config).then(res => {\n      dispatch(getMessage(res.data.message, 'LOGIN_SUCCESS'));\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n};\nexport const register = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n\n    if (formValues.password !== formValues.repassword) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      Axios.post('/api/users/register', body, config).then(res => {\n        dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\n        dispatch({\n          type: REGISTERSUCCESS,\n          payload: res.data\n        });\n      }).catch(err => {\n        dispatch(returnError(err.response.data.errorMessage, 'REGISTER_FAIL'));\n        dispatch({\n          type: REGISTER_FAIL\n        });\n      });\n    }\n  };\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const configToken = getState => {\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; //If Token, add to headers\n\n  if (token) {\n    config.headers['end_auth'] = token;\n  }\n\n  return config;\n};\nexport const verify = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n    Axios.post('/api/users/verify', body, config).then(res => {\n      dispatch(getMessage(res.data.message, 'VERIFICATION_SUCCESS'));\n      dispatch({\n        type: VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'VERIFICATION_FAIL'));\n      dispatch({\n        type: VERIFICATION_FAIL\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/KIIT/Documents/Projects/OPEN/DevLearn/client/src/actions/index.js"],"names":["REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","SIGN_OUT","REGISTERSUCCESS","USER_LOADING","USER_LOADED","AUTH_ERROR","GOOGLE_SIGN_IN","GOOGLE_SIGN_OUT","VERIFICATION_SUCCESS","VERIFICATION_FAIL","returnError","connect","Axios","getMessage","browserHistory","loadUser","dispatch","type","get","then","res","payload","data","console","log","catch","err","response","signIn","userId","signOut","login","formValues","config","headers","body","JSON","stringify","post","message","errorMessage","register","password","repassword","logout","configToken","getState","token","auth","verify"],"mappings":"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","sourcesContent":["import {\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  SIGN_OUT,\r\n  REGISTERSUCCESS,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  GOOGLE_SIGN_IN,\r\n  GOOGLE_SIGN_OUT,\r\n  VERIFICATION_SUCCESS,\r\n  VERIFICATION_FAIL,\r\n} from './types';\r\n\r\nimport { returnError } from './errorAction';\r\n\r\nimport connect from '../routes/connect';\r\nimport Axios from 'axios';\r\nimport { getMessage } from './msgAction';\r\nimport { browserHistory } from '../components/Header/Header';\r\n\r\nexport const loadUser = () => (dispatch) => {\r\n  dispatch({ type: USER_LOADING });\r\n  Axios.get('http://localhost:5000/api/users/auth')\r\n    .then((res) => {\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n      console.log(res.data);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(returnError(err.response.data, 'AUTH_ERROR'));\r\n      dispatch({ type: AUTH_ERROR });\r\n    });\r\n};\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: GOOGLE_SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: GOOGLE_SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const login = (formValues) => {\r\n  return async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = JSON.stringify(formValues);\r\n    await Axios.post('/api/users/login', body, config)\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'LOGIN_SUCCESS'));\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnError(err.response.data.errorMessage, 'LOGIN_FAIL'));\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const register = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.password !== formValues.repassword) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('/api/users/register', body, config)\r\n        .then((res) => {\r\n          dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\r\n          dispatch({\r\n            type: REGISTERSUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'REGISTER_FAIL')\r\n          );\r\n          dispatch({\r\n            type: REGISTER_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: SIGN_OUT });\r\n};\r\n\r\nexport const configToken = (getState) => {\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  };\r\n\r\n  //If Token, add to headers\r\n  if (token) {\r\n    config.headers['end_auth'] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nexport const verify = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    Axios.post('/api/users/verify', body, config)\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'VERIFICATION_SUCCESS'));\r\n        dispatch({\r\n          type: VERIFICATION_SUCCESS,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnError(err.response.data.errorMessage, 'VERIFICATION_FAIL')\r\n        );\r\n        dispatch({\r\n          type: VERIFICATION_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}