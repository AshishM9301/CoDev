{"ast":null,"code":"import { REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, SIGN_OUT, REGISTERSUCCESS, USER_LOADING, USER_LOADED, AUTH_ERROR, GOOGLE_SIGN_IN, GOOGLE_SIGN_OUT, VERIFICATION_SUCCESS, VERIFICATION_FAIL, SEND_OTP_SUCCESS, SEND_OTP_FAIL, DETAIL_UPDATING_SUCCESS, DETAIL_UPDATING_FAIL, USERS_LOADING_SUCCESS, USERS_LOADING_FAIL, USER_ACTIVATE_FAIL, USER_ACTIVATE_SUCCESS } from './types';\nimport { returnError } from './errorAction';\nimport Axios from 'axios';\nimport { getMessage } from './msgAction';\nimport { clickedPaymentButton } from './dashboardAction';\nexport const loadUser = () => dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  Axios.get('/api/users/auth').then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch(returnError(err.response.data, 'AUTH_ERROR'));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const signIn = userId => {\n  return {\n    type: GOOGLE_SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: GOOGLE_SIGN_OUT\n  };\n};\nexport const login = formValues => {\n  return dispatch => {\n    const response = fetch('/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formValues)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(getMessage(data.message, 'LOGIN_SUCCESS'));\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        console.log(data);\n        dispatch(returnError(response.data.errorMessage, 'LOGIN_FAIL'));\n        dispatch({\n          type: LOGIN_FAIL\n        });\n      }\n    }).catch(error => {});\n  };\n};\nexport const register = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n\n    if (formValues.password !== formValues.repassword) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      Axios.post('/api/users/register', body, config).then(res => {\n        dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\n        dispatch({\n          type: REGISTERSUCCESS,\n          payload: res.data\n        });\n      }).catch(err => {\n        dispatch(returnError(err.response.data.errorMessage, 'REGISTER_FAIL'));\n        dispatch({\n          type: REGISTER_FAIL\n        });\n      });\n    }\n  };\n};\nexport const logout = () => {\n  const respose = fetch('/api/users/logout').then(res => res.data);\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const configToken = getState => {\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; //If Token, add to headers\n\n  if (token) {\n    config.headers['end_auth'] = token;\n  }\n\n  return config;\n};\nexport const verify = formValues => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n    console.log(body);\n    await Axios.post('/api/users/verify', body, config).then(res => {\n      dispatch(getMessage(res.data.message, 'VERIFICATION_SUCCESS'));\n      dispatch({\n        type: VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'VERIFICATION_FAIL'));\n      dispatch({\n        type: VERIFICATION_FAIL\n      });\n    });\n  };\n};\nexport const otpSend = () => {\n  return dispatch => {\n    Axios.get('/api/users/emailverify').then(res => {\n      console.log(res.data);\n      dispatch(getMessage(res.data.message, 'SEND_OTP_SUCCESS'));\n      dispatch({\n        type: SEND_OTP_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'SEND_OTP_FAIL'));\n      dispatch({\n        type: SEND_OTP_FAIL\n      });\n    });\n  };\n};\nexport const detailUpdater = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n\n    if (formValues.password !== formValues.password2) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      Axios.post('/api/users/detials', body, config).then(res => {\n        dispatch(clickedPaymentButton('GET_PAYMENT'));\n        dispatch(getMessage(res.data.message, 'DETAIL_UPDATING_SUCCESS'));\n        dispatch({\n          type: DETAIL_UPDATING_SUCCESS,\n          payload: res.data\n        });\n      }).catch(err => {\n        dispatch(returnError(err.response.data.errorMessage, 'DETAIL_UPDATING_FAIL'));\n        dispatch({\n          type: DETAIL_UPDATING_FAIL\n        });\n      });\n    }\n  };\n};\nexport const displayUser = () => {\n  return async dispatch => {\n    await Axios.get('/api/users').then(res => {\n      dispatch(getMessage(res.data.message, 'USERS_LOADING_SUCCESS'));\n      dispatch({\n        type: USERS_LOADING_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'USERS_LOADING_FAIL'));\n      dispatch({\n        type: USERS_LOADING_FAIL\n      });\n    });\n  };\n};\nexport const activateUser = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n\n    if (formValues.role !== 2) {\n      dispatch(returnError(`${formValues.firstName} is not updated his Detail `, 'USER_ACTIVATE_FAIL'));\n      dispatch({\n        type: USER_ACTIVATE_FAIL\n      });\n    } else {\n      Axios.post('/api/users/activate', body, config).then(res => {\n        dispatch(getMessage(res.data.message, 'USER_ACTIVATE_SUCCESS'));\n        dispatch({\n          type: USER_ACTIVATE_SUCCESS,\n          payload: res.data\n        });\n      }).catch(err => {\n        dispatch(returnError(err.response.data.errorMessage, 'USER_ACTIVATE_FAIL'));\n        dispatch({\n          type: USER_ACTIVATE_FAIL\n        });\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/Projects/OPEN/DevLearn/client/src/actions/index.js"],"names":["REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","SIGN_OUT","REGISTERSUCCESS","USER_LOADING","USER_LOADED","AUTH_ERROR","GOOGLE_SIGN_IN","GOOGLE_SIGN_OUT","VERIFICATION_SUCCESS","VERIFICATION_FAIL","SEND_OTP_SUCCESS","SEND_OTP_FAIL","DETAIL_UPDATING_SUCCESS","DETAIL_UPDATING_FAIL","USERS_LOADING_SUCCESS","USERS_LOADING_FAIL","USER_ACTIVATE_FAIL","USER_ACTIVATE_SUCCESS","returnError","Axios","getMessage","clickedPaymentButton","loadUser","dispatch","type","get","then","res","payload","data","catch","err","console","log","response","signIn","userId","signOut","login","formValues","fetch","method","headers","body","JSON","stringify","json","success","message","errorMessage","error","register","config","password","repassword","post","logout","respose","configToken","getState","token","auth","verify","otpSend","detailUpdater","password2","displayUser","activateUser","role","firstName"],"mappings":"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","sourcesContent":["import {\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  SIGN_OUT,\r\n  REGISTERSUCCESS,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  GOOGLE_SIGN_IN,\r\n  GOOGLE_SIGN_OUT,\r\n  VERIFICATION_SUCCESS,\r\n  VERIFICATION_FAIL,\r\n  SEND_OTP_SUCCESS,\r\n  SEND_OTP_FAIL,\r\n  DETAIL_UPDATING_SUCCESS,\r\n  DETAIL_UPDATING_FAIL,\r\n  USERS_LOADING_SUCCESS,\r\n  USERS_LOADING_FAIL,\r\n  USER_ACTIVATE_FAIL,\r\n  USER_ACTIVATE_SUCCESS,\r\n} from './types';\r\n\r\nimport { returnError } from './errorAction';\r\n\r\nimport Axios from 'axios';\r\nimport { getMessage } from './msgAction';\r\nimport { clickedPaymentButton } from './dashboardAction';\r\n\r\nexport const loadUser = () => (dispatch) => {\r\n  dispatch({ type: USER_LOADING });\r\n  Axios.get('/api/users/auth')\r\n    .then((res) => {\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(returnError(err.response.data, 'AUTH_ERROR'));\r\n      dispatch({ type: AUTH_ERROR });\r\n    });\r\n};\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: GOOGLE_SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: GOOGLE_SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const login = (formValues) => {\r\n  return (dispatch) => {\r\n    const response = fetch('/api/users/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formValues),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.success) {\r\n          dispatch(getMessage(data.message, 'LOGIN_SUCCESS'));\r\n          dispatch({ type: LOGIN_SUCCESS, payload: response.data });\r\n        } else {\r\n          console.log(data);\r\n          dispatch(returnError(response.data.errorMessage, 'LOGIN_FAIL'));\r\n          dispatch({\r\n            type: LOGIN_FAIL,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n};\r\n\r\nexport const register = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.password !== formValues.repassword) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('/api/users/register', body, config)\r\n        .then((res) => {\r\n          dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\r\n          dispatch({\r\n            type: REGISTERSUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'REGISTER_FAIL')\r\n          );\r\n          dispatch({\r\n            type: REGISTER_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  const respose = fetch('/api/users/logout').then((res) => res.data);\r\n\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const configToken = (getState) => {\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n  };\r\n\r\n  //If Token, add to headers\r\n  if (token) {\r\n    config.headers['end_auth'] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nexport const verify = (formValues) => {\r\n  return async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    console.log(body);\r\n    await Axios.post('/api/users/verify', body, config)\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'VERIFICATION_SUCCESS'));\r\n        dispatch({\r\n          type: VERIFICATION_SUCCESS,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnError(err.response.data.errorMessage, 'VERIFICATION_FAIL')\r\n        );\r\n        dispatch({\r\n          type: VERIFICATION_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const otpSend = () => {\r\n  return (dispatch) => {\r\n    Axios.get('/api/users/emailverify')\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        dispatch(getMessage(res.data.message, 'SEND_OTP_SUCCESS'));\r\n        dispatch({\r\n          type: SEND_OTP_SUCCESS,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnError(err.response.data.errorMessage, 'SEND_OTP_FAIL'));\r\n        dispatch({\r\n          type: SEND_OTP_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const detailUpdater = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.password !== formValues.password2) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('/api/users/detials', body, config)\r\n        .then((res) => {\r\n          dispatch(clickedPaymentButton('GET_PAYMENT'));\r\n          dispatch(getMessage(res.data.message, 'DETAIL_UPDATING_SUCCESS'));\r\n          dispatch({\r\n            type: DETAIL_UPDATING_SUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'DETAIL_UPDATING_FAIL')\r\n          );\r\n\r\n          dispatch({\r\n            type: DETAIL_UPDATING_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n\r\nexport const displayUser = () => {\r\n  return async (dispatch) => {\r\n    await Axios.get('/api/users')\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'USERS_LOADING_SUCCESS'));\r\n        dispatch({\r\n          type: USERS_LOADING_SUCCESS,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnError(err.response.data.errorMessage, 'USERS_LOADING_FAIL')\r\n        );\r\n        dispatch({\r\n          type: USERS_LOADING_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const activateUser = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.role !== 2) {\r\n      dispatch(\r\n        returnError(\r\n          `${formValues.firstName} is not updated his Detail `,\r\n          'USER_ACTIVATE_FAIL'\r\n        )\r\n      );\r\n      dispatch({\r\n        type: USER_ACTIVATE_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('/api/users/activate', body, config)\r\n        .then((res) => {\r\n          dispatch(getMessage(res.data.message, 'USER_ACTIVATE_SUCCESS'));\r\n          dispatch({\r\n            type: USER_ACTIVATE_SUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'USER_ACTIVATE_FAIL')\r\n          );\r\n\r\n          dispatch({\r\n            type: USER_ACTIVATE_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}