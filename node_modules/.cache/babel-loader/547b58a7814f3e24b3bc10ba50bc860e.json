{"ast":null,"code":"import{ERROR_DELETE,ERROR_FETCH,ERROR_SHOW,REGISTER_FAIL,LOGIN_FAIL,LOGIN_SUCCESS,SIGN_OUT,GET_ERROR,CLEAR_ERROR,REGISTERSUCCESS}from'./types';import{returnError}from'./errorAction';import connect from'../routes/connect';import Axios from'axios';import{getMessage}from'./msgAction';export var signIn=function signIn(formValues){return function(dispatch){var config={headers:{'Content-Type':'application/json'}};var body=JSON.stringify(formValues);Axios.post('http://localhost:5000/api/users/login',body,config).then(function(res){dispatch(getMessage(res.data.message,'LOGIN_SUCCESS'));dispatch({type:LOGIN_SUCCESS});}).catch(function(err){dispatch(returnError(err.response.data.errorMessage,'LOGIN_FAIL'));dispatch({type:LOGIN_FAIL});});};};export var register=function register(formValues){return function(dispatch){var config={headers:{'Content-Type':'application/json'}};var body=JSON.stringify(formValues);if(formValues.password!==formValues.repassword){dispatch(returnError('Password did not Match','REGISTER_FAIL'));dispatch({type:REGISTER_FAIL});}else{Axios.post('http://localhost:5000/api/users/register',body,config).then(function(res){dispatch(getMessage(res.data.message,'REGISTERSUCCESS'));dispatch({type:REGISTERSUCCESS,payload:res.data});}).catch(function(err){dispatch(returnError(err.response.data.errorMessage,'REGISTER_FAIL'));dispatch({type:REGISTER_FAIL});});}};};","map":{"version":3,"sources":["C:/Users/KIIT/Documents/Projects/OPEN/mern-boilerplate/client/src/actions/index.js"],"names":["ERROR_DELETE","ERROR_FETCH","ERROR_SHOW","REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","SIGN_OUT","GET_ERROR","CLEAR_ERROR","REGISTERSUCCESS","returnError","connect","Axios","getMessage","signIn","formValues","dispatch","config","headers","body","JSON","stringify","post","then","res","data","message","type","catch","err","response","errorMessage","register","password","repassword","payload"],"mappings":"AAAA,OACEA,YADF,CAEEC,WAFF,CAGEC,UAHF,CAIEC,aAJF,CAKEC,UALF,CAMEC,aANF,CAOEC,QAPF,CAQEC,SARF,CASEC,WATF,CAUEC,eAVF,KAWO,SAXP,CAaA,OAASC,WAAT,KAA4B,eAA5B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,aAA3B,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,UAAD,CAAgB,CACpC,MAAO,UAACC,QAAD,CAAc,CACnB,GAAMC,CAAAA,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAAf,CAKA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAAb,CACAH,KAAK,CAACU,IAAN,CAAW,uCAAX,CAAoDH,IAApD,CAA0DF,MAA1D,EACGM,IADH,CACQ,SAACC,GAAD,CAAS,CACbR,QAAQ,CAACH,UAAU,CAACW,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAmB,eAAnB,CAAX,CAAR,CACAV,QAAQ,CAAC,CACPW,IAAI,CAAEtB,aADC,CAAD,CAAR,CAGD,CANH,EAOGuB,KAPH,CAOS,SAACC,GAAD,CAAS,CACdb,QAAQ,CAACN,WAAW,CAACmB,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBM,YAAnB,CAAiC,YAAjC,CAAZ,CAAR,CACAf,QAAQ,CAAC,CACPW,IAAI,CAAEvB,UADC,CAAD,CAAR,CAGD,CAZH,EAaD,CApBD,CAqBD,CAtBM,CAwBP,MAAO,IAAM4B,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACjB,UAAD,CAAgB,CACtC,MAAO,UAACC,QAAD,CAAc,CACnB,GAAMC,CAAAA,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAAf,CAMA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAAb,CACA,GAAIA,UAAU,CAACkB,QAAX,GAAwBlB,UAAU,CAACmB,UAAvC,CAAmD,CACjDlB,QAAQ,CAACN,WAAW,CAAC,wBAAD,CAA2B,eAA3B,CAAZ,CAAR,CACAM,QAAQ,CAAC,CACPW,IAAI,CAAExB,aADC,CAAD,CAAR,CAGD,CALD,IAKO,CACLS,KAAK,CAACU,IAAN,CAAW,0CAAX,CAAuDH,IAAvD,CAA6DF,MAA7D,EACGM,IADH,CACQ,SAACC,GAAD,CAAS,CACbR,QAAQ,CAACH,UAAU,CAACW,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAmB,iBAAnB,CAAX,CAAR,CACAV,QAAQ,CAAC,CACPW,IAAI,CAAElB,eADC,CAEP0B,OAAO,CAAEX,GAAG,CAACC,IAFN,CAAD,CAAR,CAID,CAPH,EAQGG,KARH,CAQS,SAACC,GAAD,CAAS,CACdb,QAAQ,CACNN,WAAW,CAACmB,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBM,YAAnB,CAAiC,eAAjC,CADL,CAAR,CAGAf,QAAQ,CAAC,CACPW,IAAI,CAAExB,aADC,CAAD,CAAR,CAGD,CAfH,EAgBD,CACF,CA/BD,CAgCD,CAjCM","sourcesContent":["import {\r\n  ERROR_DELETE,\r\n  ERROR_FETCH,\r\n  ERROR_SHOW,\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  SIGN_OUT,\r\n  GET_ERROR,\r\n  CLEAR_ERROR,\r\n  REGISTERSUCCESS,\r\n} from './types';\r\n\r\nimport { returnError } from './errorAction';\r\n\r\nimport connect from '../routes/connect';\r\nimport Axios from 'axios';\r\nimport { getMessage } from './msgAction';\r\n\r\nexport const signIn = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = JSON.stringify(formValues);\r\n    Axios.post('http://localhost:5000/api/users/login', body, config)\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'LOGIN_SUCCESS'));\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnError(err.response.data.errorMessage, 'LOGIN_FAIL'));\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const register = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.password !== formValues.repassword) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('http://localhost:5000/api/users/register', body, config)\r\n        .then((res) => {\r\n          dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\r\n          dispatch({\r\n            type: REGISTERSUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'REGISTER_FAIL')\r\n          );\r\n          dispatch({\r\n            type: REGISTER_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}