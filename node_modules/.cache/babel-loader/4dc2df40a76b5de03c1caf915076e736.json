{"ast":null,"code":"import { ERROR_DELETE, ERROR_FETCH, ERROR_SHOW, REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, SIGN_OUT, GET_ERROR, CLEAR_ERROR, REGISTERSUCCESS } from './types';\nimport { returnError } from './errorAction';\nimport connect from '../routes/connect';\nimport Axios from 'axios';\nimport { getMessage } from './msgAction';\nexport const signIn = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n    Axios.post('http://localhost:5000/api/users/login', body, config).then(res => {\n      dispatch(getMessage(res.data.message, 'LOGIN_SUCCESS'));\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(err => {\n      dispatch(returnError(err.response.data.errorMessage, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n};\nexport const register = formValues => {\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formValues);\n\n    if (formValues.password !== formValues.repassword) {\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      Axios.post('http://localhost:5000/api/users/register', body, config).then(res => {\n        dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\n        dispatch({\n          type: REGISTERSUCCESS,\n          payload: res.data\n        });\n      }).catch(err => {\n        dispatch(returnError(err.response.data.errorMessage, 'REGISTER_FAIL'));\n        dispatch({\n          type: REGISTER_FAIL\n        });\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/KIIT/Documents/Projects/OPEN/mern-boilerplate/client/src/actions/index.js"],"names":["ERROR_DELETE","ERROR_FETCH","ERROR_SHOW","REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","SIGN_OUT","GET_ERROR","CLEAR_ERROR","REGISTERSUCCESS","returnError","connect","Axios","getMessage","signIn","formValues","dispatch","config","headers","body","JSON","stringify","post","then","res","data","message","type","catch","err","response","errorMessage","register","password","repassword","payload"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,QAPF,EAQEC,SARF,EASEC,WATF,EAUEC,eAVF,QAWO,SAXP;AAaA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,OAAO,MAAMC,MAAM,GAAIC,UAAD,IAAgB;AACpC,SAAQC,QAAD,IAAc;AACnB,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAAb;AACAH,IAAAA,KAAK,CAACU,IAAN,CAAW,uCAAX,EAAoDH,IAApD,EAA0DF,MAA1D,EACGM,IADH,CACSC,GAAD,IAAS;AACbR,MAAAA,QAAQ,CAACH,UAAU,CAACW,GAAG,CAACC,IAAJ,CAASC,OAAV,EAAmB,eAAnB,CAAX,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEtB;AADC,OAAD,CAAR;AAGD,KANH,EAOGuB,KAPH,CAOUC,GAAD,IAAS;AACdb,MAAAA,QAAQ,CAACN,WAAW,CAACmB,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBM,YAAnB,EAAiC,YAAjC,CAAZ,CAAR;AACAf,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEvB;AADC,OAAD,CAAR;AAGD,KAZH;AAaD,GApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAM4B,QAAQ,GAAIjB,UAAD,IAAgB;AACtC,SAAQC,QAAD,IAAc;AACnB,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAAb;;AACA,QAAIA,UAAU,CAACkB,QAAX,KAAwBlB,UAAU,CAACmB,UAAvC,EAAmD;AACjDlB,MAAAA,QAAQ,CAACN,WAAW,CAAC,wBAAD,EAA2B,eAA3B,CAAZ,CAAR;AACAM,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAExB;AADC,OAAD,CAAR;AAGD,KALD,MAKO;AACLS,MAAAA,KAAK,CAACU,IAAN,CAAW,0CAAX,EAAuDH,IAAvD,EAA6DF,MAA7D,EACGM,IADH,CACSC,GAAD,IAAS;AACbR,QAAAA,QAAQ,CAACH,UAAU,CAACW,GAAG,CAACC,IAAJ,CAASC,OAAV,EAAmB,iBAAnB,CAAX,CAAR;AACAV,QAAAA,QAAQ,CAAC;AACPW,UAAAA,IAAI,EAAElB,eADC;AAEP0B,UAAAA,OAAO,EAAEX,GAAG,CAACC;AAFN,SAAD,CAAR;AAID,OAPH,EAQGG,KARH,CAQUC,GAAD,IAAS;AACdb,QAAAA,QAAQ,CACNN,WAAW,CAACmB,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBM,YAAnB,EAAiC,eAAjC,CADL,CAAR;AAGAf,QAAAA,QAAQ,CAAC;AACPW,UAAAA,IAAI,EAAExB;AADC,SAAD,CAAR;AAGD,OAfH;AAgBD;AACF,GA/BD;AAgCD,CAjCM","sourcesContent":["import {\r\n  ERROR_DELETE,\r\n  ERROR_FETCH,\r\n  ERROR_SHOW,\r\n  REGISTER_FAIL,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  SIGN_OUT,\r\n  GET_ERROR,\r\n  CLEAR_ERROR,\r\n  REGISTERSUCCESS,\r\n} from './types';\r\n\r\nimport { returnError } from './errorAction';\r\n\r\nimport connect from '../routes/connect';\r\nimport Axios from 'axios';\r\nimport { getMessage } from './msgAction';\r\n\r\nexport const signIn = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = JSON.stringify(formValues);\r\n    Axios.post('http://localhost:5000/api/users/login', body, config)\r\n      .then((res) => {\r\n        dispatch(getMessage(res.data.message, 'LOGIN_SUCCESS'));\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnError(err.response.data.errorMessage, 'LOGIN_FAIL'));\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const register = (formValues) => {\r\n  return (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify(formValues);\r\n    if (formValues.password !== formValues.repassword) {\r\n      dispatch(returnError('Password did not Match', 'REGISTER_FAIL'));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    } else {\r\n      Axios.post('http://localhost:5000/api/users/register', body, config)\r\n        .then((res) => {\r\n          dispatch(getMessage(res.data.message, 'REGISTERSUCCESS'));\r\n          dispatch({\r\n            type: REGISTERSUCCESS,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch(\r\n            returnError(err.response.data.errorMessage, 'REGISTER_FAIL')\r\n          );\r\n          dispatch({\r\n            type: REGISTER_FAIL,\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}